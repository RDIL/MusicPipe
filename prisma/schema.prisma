generator client {
    provider = "prisma-client-js"
    output   = "../src/api-generated"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

/// A user of the application.
model User {
    /// The CUID of the user.
    id       String   @id @default(cuid())
    /// The username of the user - can be an email address.
    username String   @unique
    /// The user's hashed password.
    password String   @default("")
    /// The user's chosen display name.
    name     String   @default("")
    /// The user's role in the application.
    role     UserRole @default(ARTIST)

    /// The bound Artist's ID, if any.
    artistId String? @unique
    /// The bound Artist, if any.
    artist   Artist? @relation(fields: [artistId], references: [id])
}

/// An album.
model Album {
    /// The CUID of the album.
    id    String @id @default(cuid())
    /// The title of the album.
    title String

    /// A list of the album's primary artists' CUIDs.
    primaryArtistIds String[]
    /// A list of the album's songs' CUIDs. Order matters!
    tracklistIds     String[]

    type AlbumType @default(ALBUM)
}

/// An artist, band, or other musical entity. Can appear as a primary, featured, writer, or producer on a musical work.
model Artist {
    /// The CUID of the artist.
    id      String   @id @default(cuid())
    /// The artist's name.
    name    String   @unique
    /// Any aliases the artist may have.
    aliases String[] @default([])

    /// The artist's user account, can be null.
    user   User?
}

/// A single song.
model Song {
    /// The CUID of the song.
    id    String @id @default(cuid())
    /// The title of the song.
    title String

    /// The CUIDs of the song's primary artists.
    primaryArtistIds  String[]
    /// The CUIDs of the song's writers.
    writerIds         String[]
    /// The CUIDs of the song's producers.
    producerIds       String[]
    /// The CUIDs of the song's featured artists.
    featuredArtistIds String[]
}

/// A user's role controls what they can do in the application.
enum UserRole {
    /// Administrators can do everything managers can do, but with added controls over other users.
    ADMIN
    /// Managers can view and edit anything on the site, but cannot create or delete users.
    MANAGER
    /// Viewers can view all content on the site, but cannot edit anything.
    VIEWER
    /// Artists can view and edit their own content, but cannot view or edit anything else.
    ARTIST
}

/// A type of album.
enum AlbumType {
    /// A basic set of songs.
    ALBUM
    /// A single song, may include one or more remixes.
    SINGLE
    /// An extended play - a collection of songs, usually less than a full album.
    EP
    /// A compilation of songs from multiple artists.
    COMPILATION
    /// A compilation of music, typically from multiple sources, that is combined into a single track or continuous mix of tracks.
    MIXTAPE
}
